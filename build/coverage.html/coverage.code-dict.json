{"/home/travis/build/npmtest/node-npmtest-ect/test.js":"/* istanbul instrument in package npmtest_ect */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ect/lib.npmtest_ect.js":"/* istanbul instrument in package npmtest_ect */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_ect = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_ect = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-ect/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-ect && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_ect */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_ect\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_ect.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_ect.rollup.js'] =\n            local.assetsDict['/assets.npmtest_ect.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_ect.__dirname + '/lib.npmtest_ect.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ect/node_modules/ect/index.js":"module.exports = require('./lib/ect');","/home/travis/build/npmtest/node-npmtest-ect/node_modules/ect/lib/ect.js":"/*!\n * ECT CoffeeScript template engine v0.5.9\n * https://github.com/baryshev/ect\n *\n * Copyright 2012-2013, Vadim M. Baryshev <vadimbaryshev@gmail.com>\n * Licensed under the MIT license\n * https://github.com/baryshev/ect/LICENSE\n *\n * Includes parts of node\n * https://github.com/joyent/node\n * Copyright Joyent, Inc. and other Node contributors\n * Released under the MIT license\n *\n * Includes Cross-Browser Split 1.1.1\n * http://xregexp.com/\n * Copyright 2007-2012 Steven Levithan <stevenlevithan.com>\n * Released under the MIT license\n */\n(function () {\n\t'use strict';\n\tvar fs;\n\tvar path;\n\tvar CoffeeScript;\n\n\tvar\tECT = function (options) {\n\t\tif (!(this instanceof ECT)) {\n\t\t\treturn new ECT(options);\n\t\t}\n\n\t\tthis.options = {\n\t\t\topen : '<%',\n\t\t\tclose : '%>',\n\t\t\text : '',\n\t\t\tcache : true,\n\t\t\twatch : false,\n\t\t\troot : ''\n\t\t};\n\n\t\tvar\n\t\t\tect = this,\n\t\t\ttrimExp = /^[ \\t]+|[ \\t]+$/g,\n\t\t\tnewlineExp = /\\n/g,\n\t\t\tcache = {},\n\t\t\twatchers = {},\n\t\t\tindentChars = { ':' : ':', '>' : '>' },\n\t\t\tescapeExp = /[&<>\"]/,\n\t\t\tescapeAmpExp = /&/g,\n\t\t\tescapeLtExp = /</g,\n\t\t\tescapeGtExp = />/g,\n\t\t\tescapeQuotExp = /\"/g,\n\t\t\tregExpEscape = function (str) {\n\t\t\t\treturn String(str).replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, '\\\\$&');\n\t\t\t},\n\n\t\t\tread = function (file) {\n\t\t\t\tif (Object.prototype.toString.call(ect.options.root) === '[object Object]') {\n\t\t\t\t\tvar data = file.split('.').reduce(function (currentContext, key) { return currentContext[key]; }, ect.options.root);\n\t\t\t\t\tif (Object.prototype.toString.call(data) === '[object String]') {\n\t\t\t\t\t\treturn data;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new Error ('Failed to load template ' + file);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttry {\n\t\t\t\t\t\treturn fs.readFileSync(file, 'utf8');\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tthrow new Error ('Failed to load template ' + file);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tcompile = function (template) {\n\t\t\t\tvar\n\t\t\t\t\tlineNo = 1,\n\t\t\t\t\tbufferStack = [ '__ectOutput' ], bufferStackPointer = 0,\n\t\t\t\t\tbuffer = bufferStack[bufferStackPointer] + ' = \\'',\n\t\t\t\t\tmatches = template.split(new RegExp(regExpEscape(ect.options.open) + '((?:.|[\\r\\n])+?)(?:' + regExpEscape(ect.options.close) + '|$)')),\n\t\t\t\t\toutput, text, command, line,\n\t\t\t\t\tprefix, postfix, newline,\n\t\t\t\t\tindentChar, indentation = '', indent = false, indentStack = [], indentStackPointer = -1, baseIndent, lines, j;\n\n\t\t\t\tfor (var i = 0; i < matches.length; i++) {\n\t\t\t\t\ttext = matches[i];\n\t\t\t\t\tcommand = '';\n\t\t\t\t\tif (i % 2 === 1) {\n\t\t\t\t\t\tline = '__ectFileInfo.line = ' + lineNo;\n\t\t\t\t\t\tswitch (text.charAt(0)) {\n\t\t\t\t\t\tcase '=':\n\t\t\t\t\t\t\tprefix = '\\' + (' + line + '\\n\\'\\') + __ectTemplateContext.escape(';\n\t\t\t\t\t\t\tpostfix = ') + \\'';\n\t\t\t\t\t\t\tnewline = '';\n\t\t\t\t\t\t\ttext = text.substr(1);\n\t\t\t\t\t\t\toutput = 'escaped';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase '-':\n\t\t\t\t\t\t\tprefix = '\\' + (' + line + '\\n\\'\\') + ((';\n\t\t\t\t\t\t\tpostfix = ') ? \\'\\') + \\'';\n\t\t\t\t\t\t\tnewline = '';\n\t\t\t\t\t\t\ttext = text.substr(1);\n\t\t\t\t\t\t\toutput = 'unescaped';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tprefix = '\\'\\n' + line;\n\t\t\t\t\t\t\tpostfix = '\\n' + bufferStack[bufferStackPointer] + ' += \\'';\n\t\t\t\t\t\t\tnewline = '\\n';\n\t\t\t\t\t\t\toutput = 'none';\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttext = text.replace(trimExp, '');\n\n\t\t\t\t\t\tcommand = text.split(/[^a-z]+/)[0];\n\t\t\t\t\t\tif ((indentChar = indentChars[text.charAt(text.length - 1)])) {\n\t\t\t\t\t\t\ttext = text.replace(/:$/, '').replace(trimExp, '');\n\t\t\t\t\t\t\tif (indentChar === '>') {\n\t\t\t\t\t\t\t\tif (/[$a-z_][0-9a-z_$]*[^=]+(-|=)>/i.test(text.replace(/'.*'|\".*\"/, ''))) {\n\t\t\t\t\t\t\t\t\tindentStack.push('capture_output_' + output);\n\t\t\t\t\t\t\t\t\tindentStackPointer++;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbufferStack.push('__ectFunction' + bufferStackPointer);\n\t\t\t\t\t\t\t\tbufferStackPointer++;\n\t\t\t\t\t\t\t\tpostfix = '\\n' + bufferStack[bufferStackPointer] + ' = \\'';\n\t\t\t\t\t\t\t\tcommand = 'function';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tindentStack.push(command);\n\t\t\t\t\t\t\tindentStackPointer++;\n\t\t\t\t\t\t\tindent = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tswitch (command) {\n\t\t\t\t\t\tcase 'include' :\n\t\t\t\t\t\t\tif (output === 'none') {\n\t\t\t\t\t\t\t\tprefix = '\\' + (' + line + '\\n\\'\\') + (';\n\t\t\t\t\t\t\t\tpostfix = ') + \\'';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbuffer += prefix.replace(newlineExp, '\\n' + indentation) + text + postfix.replace(newlineExp, '\\n' + indentation);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'block' :\n\t\t\t\t\t\t\tbufferStack.push('__ectTemplateContext.blocks[\\'' + text.replace(/block\\s+('|\")([^'\"]+)('|\").*/, '$2') + '\\']');\n\t\t\t\t\t\t\tbufferStackPointer++;\n\t\t\t\t\t\t\tprefix = '\\'\\n';\n\t\t\t\t\t\t\tpostfix = '\\n' + bufferStack[bufferStackPointer] + ' += \\'';\n\t\t\t\t\t\t\ttext = 'if ' + text;\n\t\t\t\t\t\t\tbuffer += prefix.replace(newlineExp, '\\n' + indentation) + text;\n\t\t\t\t\t\t\tif (indent) {\n\t\t\t\t\t\t\t\tindentation += '  ';\n\t\t\t\t\t\t\t\tindent = false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbuffer += postfix.replace(newlineExp, '\\n' + indentation);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'content' :\n\t\t\t\t\t\t\tif (output === 'none') {\n\t\t\t\t\t\t\t\tprefix = '\\' + (' + line + '\\n\\'\\') + (';\n\t\t\t\t\t\t\t\tpostfix = ') + \\'';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (text === 'content') {\n\t\t\t\t\t\t\t\ttext = 'content()'\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbuffer += prefix.replace(newlineExp, '\\n' + indentation) + text + postfix.replace(newlineExp, '\\n' + indentation);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'end' :\n\t\t\t\t\t\t\tprefix = '\\'';\n\t\t\t\t\t\t\tswitch (indentStack[indentStackPointer]) {\n\t\t\t\t\t\t\tcase 'block' :\n\t\t\t\t\t\t\t\tbufferStack.pop();\n\t\t\t\t\t\t\t\tbufferStackPointer--;\n\t\t\t\t\t\t\t\tprefix = '\\'';\n\t\t\t\t\t\t\t\tpostfix = '\\n' + bufferStack[bufferStackPointer] + ' += \\'';\n\t\t\t\t\t\t\t\tbuffer += prefix.replace(newlineExp, '\\n' + indentation);\n\t\t\t\t\t\t\t\tindentation = indentation.substr(2);\n\t\t\t\t\t\t\t\tbuffer += postfix.replace(newlineExp, '\\n' + indentation);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'when' :\n\t\t\t\t\t\t\t\tpostfix = '\\n' + bufferStack[bufferStackPointer] + ' += \\'\\'';\n\t\t\t\t\t\t\t\tbuffer += prefix.replace(newlineExp, '\\n' + indentation) + postfix.replace(newlineExp, '\\n' + indentation);\n\t\t\t\t\t\t\t\tindentation = indentation.substr(2);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'function' :\n\t\t\t\t\t\t\t\tprefix = '\\'\\n' + bufferStack[bufferStackPointer];\n\t\t\t\t\t\t\t\tbuffer += prefix.replace(newlineExp, '\\n' + indentation);\n\t\t\t\t\t\t\t\tindentation = indentation.substr(2);\n\t\t\t\t\t\t\t\tbufferStack.pop();\n\t\t\t\t\t\t\t\tbufferStackPointer--;\n\t\t\t\t\t\t\t\tpostfix = '\\n' + bufferStack[bufferStackPointer] + ' += \\'';\n\t\t\t\t\t\t\t\tswitch (indentStack[indentStackPointer - 1]) {\n\t\t\t\t\t\t\t\t\tcase 'capture_output_escaped' :\n\t\t\t\t\t\t\t\t\t\tindentStack.pop();\n\t\t\t\t\t\t\t\t\t\tindentStackPointer--;\n\t\t\t\t\t\t\t\t\t\tbuffer += ')';\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\tcase 'capture_output_unescaped' :\n\t\t\t\t\t\t\t\t\t\tindentStack.pop();\n\t\t\t\t\t\t\t\t\t\tindentStackPointer--;\n\t\t\t\t\t\t\t\t\t\tbuffer += ') ? \\'\\')';\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\tcase 'capture_output_none' :\n\t\t\t\t\t\t\t\t\t\tindentStack.pop();\n\t\t\t\t\t\t\t\t\t\tindentStackPointer--;\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbuffer += postfix.replace(newlineExp, '\\n' + indentation);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'switch' :\n\t\t\t\t\t\t\t\tprefix = '\\n' + line;\n\t\t\t\t\t\t\tdefault :\n\t\t\t\t\t\t\t\tif (indentStack[indentStackPointer - 1] === 'switch') {\n\t\t\t\t\t\t\t\t\tpostfix = '';\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tindentation = indentation.substr(2);\n\t\t\t\t\t\t\t\tbuffer += prefix.replace(newlineExp, '\\n' + indentation) + postfix.replace(newlineExp, '\\n' + indentation);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tindentStack.pop();\n\t\t\t\t\t\t\tindentStackPointer--;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'else' :\n\t\t\t\t\t\t\tif (indentStack[indentStackPointer - 1] === 'switch') {\n\t\t\t\t\t\t\t\tprefix = '';\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tprefix = '\\'';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbuffer += prefix.replace(newlineExp, '\\n' + indentation);\n\t\t\t\t\t\t\tif (indentStack[indentStackPointer - 1] === 'if' || indentStack[indentStackPointer - 1] === 'else' || indentStack[indentStackPointer - 1] === 'unless') {\n\t\t\t\t\t\t\t\tindentStack.splice(-2, 1);\n\t\t\t\t\t\t\t\tindentStackPointer--;\n\t\t\t\t\t\t\t\tindentation = indentation.substr(2);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbuffer += (newline.length ? newline + indentation : '') + text;\n\t\t\t\t\t\t\tif (indent) {\n\t\t\t\t\t\t\t\tindentation += '  ';\n\t\t\t\t\t\t\t\tindent = false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbuffer += postfix.replace(newlineExp, '\\n' + indentation);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'switch' :\n\t\t\t\t\t\t\tbuffer += prefix.replace(newlineExp, '\\n' + indentation) + (newline.length ? newline + indentation : '') + text;\n\t\t\t\t\t\t\tif (indent) {\n\t\t\t\t\t\t\t\tindentation += '  ';\n\t\t\t\t\t\t\t\tindent = false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'when' :\n\t\t\t\t\t\t\tbuffer += (newline.length ? newline + indentation : '') + text;\n\t\t\t\t\t\t\tif (indent) {\n\t\t\t\t\t\t\t\tindentation += '  ';\n\t\t\t\t\t\t\t\tindent = false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbuffer += postfix.replace(newlineExp, '\\n' + indentation);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'extend' :\n\t\t\t\t\t\t\t\ttext = '__ectExtended = true\\n__ectParent = ' + text.replace(/extend\\s+/, '');\n\t\t\t\t\t\tdefault :\n\t\t\t\t\t\t\tif (/\\n/.test(text)) {\n\t\t\t\t\t\t\t\tlines = text.split(/\\n/);\n\t\t\t\t\t\t\t\tbuffer += prefix.replace(newlineExp, '\\n' + indentation);\n\t\t\t\t\t\t\t\tfor (j = 0; j < lines.length; j++) {\n\t\t\t\t\t\t\t\t\tif (/^\\s*$/.test(lines[j])) {\n\t\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif (typeof baseIndent === 'undefined') {\n\t\t\t\t\t\t\t\t\t\tbaseIndent = new RegExp('^' + lines[j].substr(0, lines[j].search(/[^\\s]/)));\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tbuffer += (newline.length ? newline + indentation : '') + lines[j].replace(baseIndent, '');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tlines = undefined;\n\t\t\t\t\t\t\t\tbaseIndent = undefined;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tbuffer += prefix.replace(newlineExp, '\\n' + indentation) + (newline.length ? newline + indentation : '') + text;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (indent) {\n\t\t\t\t\t\t\t\tindentation += '  ';\n\t\t\t\t\t\t\t\tindent = false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbuffer += postfix.replace(newlineExp, '\\n' + indentation);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (indentStack[indentStackPointer] !== 'switch') {\n\t\t\t\t\t\t\tbuffer += text.replace(/[\\\\']/g, '\\\\$&').replace(/\\r/g, '').replace(newlineExp, '\\\\n').replace(/^\\\\n/, '');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tlineNo += text.split(newlineExp).length - 1;\n\t\t\t\t}\n\t\t\t\tbuffer += '\\'\\nif not __ectExtended\\n  return __ectOutput\\nelse\\n  __ectContainer = __ectTemplateContext.load __ectParent\\n  __ectFileInfo.file = __ectContainer.file\\n  __ectFileInfo.line = 1\\n  __ectTemplateContext.childContent = __ectOutput\\n  return __ectContainer.compiled.call(this, __ectTemplateContext, __ectFileInfo, include, content, block)';\n\t\t\t\tbuffer = '__ectExtended = false\\n' + buffer;\n\n\t\t\t\treturn eval('(function __ectTemplate(__ectTemplateContext, __ectFileInfo, include, content, block) {\\n' + CoffeeScript.compile(buffer, { bare : true }) + '});');\n\t\t\t};\n\n\t\tvar TemplateContext = function (data) {\n\t\t\tthis.blocks = {};\n\t\t\tthis.data = data || {};\n\t\t\tthis.childContent = '';\n\t\t};\n\n\t\tTemplateContext.prototype.escape = function (text) {\n\t\t\tif (text == null) {\n\t\t\t\treturn '';\n\t\t\t}\n\t\t\tvar result = text.toString();\n\t\t\tif (!escapeExp.test(result)) {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\treturn result.replace(escapeAmpExp, '&#38;').replace(escapeLtExp, '&#60;').replace(escapeGtExp, '&#62;').replace(escapeQuotExp, '&#34;');\n\t\t};\n\n\t\tTemplateContext.prototype.block = function (name) {\n\t\t\tif (!this.blocks[name]) { this.blocks[name] = ''; }\n\t\t\treturn !this.blocks[name].length;\n\t\t};\n\n\t\tTemplateContext.prototype.content = function (block) {\n\t\t\tif (block && block.length) {\n\t\t\t\tif (!this.blocks[block]) { return ''; }\n\t\t\t\treturn this.blocks[block];\n\t\t\t} else {\n\t\t\t\treturn this.childContent;\n\t\t\t}\n\t\t};\n\n\t\tTemplateContext.prototype.load = function (template) {\n\t\t\tvar file, compiled, container, data;\n\n\t\t\tif (ect.options.cache && cache[template]) {\n\t\t\t\treturn cache[template];\n\t\t\t} else {\n\t\t\t\tvar extExp = new RegExp(regExpEscape(ect.options.ext) + '$');\n\t\t\t\tif (Object.prototype.toString.call(ect.options.root) === '[object String]') {\n\t\t\t\t\tif (typeof process !== 'undefined' && process.platform === 'win32') {\n\t\t\t\t\t\tfile = path.normalize((ect.options.root.length && template.charAt(0) !== '/' && template.charAt(0) !== '\\\\' && !/^[a-zA-Z]:/.test(template) ? (ect.options.root + '/') : '') + template.replace(extExp, '') + ect.options.ext);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfile = path.normalize((ect.options.root.length && template.charAt(0) !== '/' ? (ect.options.root + '/') : '') + template.replace(extExp, '') + ect.options.ext);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfile = template;\n\t\t\t\t}\n\n\t\t\t\tdata = read(file);\n\t\t\t\tif (data.substr(0, 24) === '(function __ectTemplate(') {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tcompiled = eval(data);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\te.message = e.message + ' in ' + file;\n\t\t\t\t\t\tthrow e;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tcompiled = compile(data);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\te.message = e.message.replace(/ on line \\d+/, '') + ' in ' + file;\n\t\t\t\t\t\tthrow e;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcontainer = { file : file, compiled : compiled, source : '(' + compiled.toString() + ');', lastModified: new Date().toUTCString(), gzip : null };\n\t\t\t\tif (ect.options.cache) {\n\t\t\t\t\tcache[template] = container;\n\t\t\t\t\tif (ect.options.watch && typeof watchers[file] === 'undefined') {\n\t\t\t\t\t\twatchers[file] = fs.watch(file, { persistent: false }, function () {\n\t\t\t\t\t\t\twatchers[file].close();\n\t\t\t\t\t\t\tdelete (watchers[file]);\n\t\t\t\t\t\t\tdelete (cache[template]);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn container;\n\t\t\t}\n\t\t};\n\n\t\tTemplateContext.prototype.render = function (template, data) {\n\t\t\tvar that = this;\n\n\t\t\tvar container = this.load(template);\n\t\t\tvar fileInfo = { file : container.file, line : 1 };\n\n\t\t\ttry {\n\t\t\t\treturn container.compiled.call(\n\t\t\t\t\tdata || this.data,\n\t\t\t\t\tthis,\n\t\t\t\t\tfileInfo,\n\t\t\t\t\tfunction() { return that.render.apply(that, arguments); },\n\t\t\t\t\tfunction() { return that.content.apply(that, arguments); },\n\t\t\t\t\tfunction() { return that.block.apply(that, arguments); }\n\t\t\t\t);\n\t\t\t} catch (e) {\n\t\t\t\tif (!/ in /.test(e.message)) {\n\t\t\t\t\te.message = e.message + ' in ' + fileInfo.file + ' on line ' + fileInfo.line;\n\t\t\t\t}\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t};\n\n\t\tthis.configure = function (options) {\n\t\t\toptions = options || {};\n\t\t\tfor (var option in options) {\n\t\t\t\tthis.options[option] = options[option];\n\t\t\t}\n\t\t};\n\n\t\tthis.compile = function (template) {\n\t\t\tvar compiled;\n\t\t\ttry {\n\t\t\t\tcompiled = compile(template);\n\t\t\t\treturn compiled;\n\t\t\t} catch (e) {\n\t\t\t\te.message = e.message.replace(/ on line \\d+/, '');\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t};\n\n\t\tthis.render = function (template, data, callback) {\n\t\t\tvar context;\n\t\t\tif (typeof arguments[arguments.length - 1] === 'function') {\n\t\t\t\tif (arguments.length === 2) {\n\t\t\t\t\tcallback = data;\n\t\t\t\t\tdata = {};\n\t\t\t\t}\n\t\t\t\tcontext = new TemplateContext(data);\n\t\t\t\ttry {\n\t\t\t\t\tcallback(undefined, context.render(template));\n\t\t\t\t} catch (e) {\n\t\t\t\t\tcallback(e);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcontext = new TemplateContext(data);\n\t\t\t\treturn context.render(template);\n\t\t\t}\n\t\t};\n\n\t\tthis.clearCache = function (template) {\n\t\t\tif (template) {\n\t\t\t\tdelete (cache[template]);\n\t\t\t} else {\n\t\t\t\tcache = {};\n\t\t\t}\n\t\t};\n\n\t\tif (typeof module !== 'undefined' && module.exports) {\n\t\t\tthis.compiler = function (options) {\n\t\t\t\tvar zlib = require('zlib');\n\t\t\t\toptions = options || {};\n\t\t\t\toptions.root = options.root || '/';\n\t\t\t\toptions.root = '/' + options.root.replace(/^\\//, '');\n\t\t\t\toptions.root = options.root.replace(/\\/$/, '') + '/';\n\t\t\t\tvar rootExp = new RegExp('^' + regExpEscape(options.root));\n\t\t\t\treturn function (req, res, next) {\n\t\t\t\t\tif (req.method !== 'GET' && req.method !== 'HEAD') {\n\t\t\t\t\t\treturn next();\n\t\t\t\t\t}\n\t\t\t\t\tif (!options.root || req.url.substr(0, options.root.length) === options.root) {\n\t\t\t\t\t\tvar template = req.url.replace(rootExp, '');\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tvar context = new TemplateContext();\n\t\t\t\t\t\t\tvar container = context.load(template);\n\t\t\t\t\t\t\tres.setHeader('Content-Type', 'application/x-javascript; charset=utf-8');\n\t\t\t\t\t\t\tres.setHeader('Last-Modified', container.lastModified);\n\t\t\t\t\t\t\tif (options.gzip) {\n\t\t\t\t\t\t\t\tres.setHeader('Content-Encoding', 'gzip');\n\t\t\t\t\t\t\t\tif (container.gzip === null) {\n\t\t\t\t\t\t\t\t\tzlib.gzip(container.source, function (err, buffer) {\n\t\t\t\t\t\t\t\t\t\tif (!err) {\n\t\t\t\t\t\t\t\t\t\t\tcontainer.gzip = buffer;\n\t\t\t\t\t\t\t\t\t\t\tres.end(container.gzip);\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\tnext(err);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tres.end(container.gzip);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tres.setHeader('Content-Length', typeof Buffer !== 'undefined' ? Buffer.byteLength(container.source, 'utf8') : container.source.length);\n\t\t\t\t\t\t\t\tres.end(container.source);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\tnext(e);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnext();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\tthis.configure(options);\n\t};\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tfs = require('fs');\n\t\tpath = require('path');\n\n\t\tif (typeof define === 'function' && define.amd) {\n\t\t\tdefine('ect', ['coffee-script'], function (cs) {\n\t\t\t\tCoffeeScript = cs;\n\t\t\t\treturn ECT;\n\t\t\t});\n\t\t} else {\n\t\t\tCoffeeScript = require('coffee-script');\n\t\t\tmodule.exports = ECT;\n\t\t}\n\t} else {\n\t\tif (!Array.prototype.filter) {\n\t\t\tArray.prototype.filter = function filter (fun, thisp) {\n\t\t\t\tvar len = this.length >> 0, res = [], i, val;\n\t\t\t\tif (typeof fun !== 'function') { throw new TypeError(); }\n\t\t\t\tfor (i = 0; i < len; i++) {\n\t\t\t\t\tif (i in this) {\n\t\t\t\t\t\tval = this[i];\n\t\t\t\t\t\tif (fun.call(thisp, val, i, this)) { res.push(val); }\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn res;\n\t\t\t};\n\t\t}\n\n\t\tif (!Array.prototype.reduce) {\n\t\t\tArray.prototype.reduce = function reduce (accumulator) {\n\t\t\t\tif (this === null || this === undefined) {\n\t\t\t\t\tthrow new TypeError('Object is null or undefined');\n\t\t\t\t}\n\t\t\t\tvar i = 0, len = this.length >> 0, curr;\n\t\t\t\tif (typeof accumulator !== 'function') {\n\t\t\t\t\tthrow new TypeError('First argument is not callable');\n\t\t\t\t}\n\t\t\t\tif (arguments.length < 2) {\n\t\t\t\t\tif (len === 0) {\n\t\t\t\t\t\tthrow new TypeError('Array length is 0 and no second argument');\n\t\t\t\t\t}\n\t\t\t\t\tcurr = this[0];\n\t\t\t\t\ti = 1;\n\t\t\t\t} else {\n\t\t\t\t\tcurr = arguments[1];\n\t\t\t\t}\n\t\t\t\twhile (i < len) {\n\t\t\t\t\tif (i in this) {\n\t\t\t\t\t\tcurr = accumulator.call(undefined, curr, this[i], i, this);\n\t\t\t\t\t}\n\t\t\t\t\t++i;\n\t\t\t\t}\n\t\t\t\treturn curr;\n\t\t\t};\n\t\t}\n\n\t\tvar split;\n\n\t\tsplit = split || function (undef) {\n\n\t\t\tvar nativeSplit = String.prototype.split,\n\t\t\t\tcompliantExecNpcg = /()??/.exec('')[1] === undef,\n\t\t\t\tself;\n\n\t\t\tself = function (str, separator, limit) {\n\t\t\t\tif (Object.prototype.toString.call(separator) !== '[object RegExp]') {\n\t\t\t\t\treturn nativeSplit.call(str, separator, limit);\n\t\t\t\t}\n\t\t\t\tvar output = [],\n\t\t\t\t\tflags = (separator.ignoreCase ? 'i' : '') +\n\t\t\t\t\t(separator.multiline ? 'm' : '') +\n\t\t\t\t\t(separator.extended ? 'x' : '') +\n\t\t\t\t\t(separator.sticky ? 'y' : ''),\n\t\t\t\t\tlastLastIndex = 0,\n\t\t\t\t\tseparator = new RegExp(separator.source, flags + 'g'),\n\t\t\t\t\tseparator2, match, lastIndex, lastLength;\n\t\t\t\tstr += '';\n\t\t\t\tif (!compliantExecNpcg) {\n\t\t\t\t\tseparator2 = new RegExp(\"^\" + separator.source + \"$(?!\\\\s)\", flags);\n\t\t\t\t}\n\t\t\t\tlimit = limit === undef ? -1 >>> 0 :\n\t\t\t\tlimit >>> 0;\n\t\t\t\twhile (match = separator.exec(str)) {\n\t\t\t\t\tlastIndex = match.index + match[0].length;\n\t\t\t\t\tif (lastIndex > lastLastIndex) {\n\t\t\t\t\t\toutput.push(str.slice(lastLastIndex, match.index));\n\t\t\t\t\t\tif (!compliantExecNpcg && match.length > 1) {\n\t\t\t\t\t\t\tmatch[0].replace(separator2, function () {\n\t\t\t\t\t\t\t\tfor (var i = 1; i < arguments.length - 2; i++) {\n\t\t\t\t\t\t\t\t\tif (arguments[i] === undef) {\n\t\t\t\t\t\t\t\t\t\tmatch[i] = undef;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (match.length > 1 && match.index < str.length) {\n\t\t\t\t\t\t\tArray.prototype.push.apply(output, match.slice(1));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlastLength = match[0].length;\n\t\t\t\t\t\tlastLastIndex = lastIndex;\n\t\t\t\t\t\tif (output.length >= limit) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (separator.lastIndex === match.index) {\n\t\t\t\t\t\tseparator.lastIndex++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (lastLastIndex === str.length) {\n\t\t\t\t\tif (lastLength || !separator.test('')) {\n\t\t\t\t\t\toutput.push('');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\toutput.push(str.slice(lastLastIndex));\n\t\t\t\t}\n\t\t\t\treturn output.length > limit ? output.slice(0, limit) : output;\n\t\t\t};\n\n\t\t\tString.prototype.split = function (separator, limit) {\n\t\t\t\treturn self(this, separator, limit);\n\t\t\t};\n\n\t\t\treturn self;\n\t\t}();\n\n\t\tif (typeof define === 'function' && define.amd ) {\n\t\t\tdefine('ect', ['coffee-script'], function (cs) {\n\t\t\t\tCoffeeScript = cs;\n\t\t\t\treturn ECT;\n\t\t\t});\n\t\t} else {\n\t\t\tCoffeeScript = window.CoffeeScript;\n\t\t\twindow.ECT = ECT;\n\t\t}\n\n\t\tpath = (function () {\n\t\t\tvar\n\t\t\t\tnormalizeArray = function (parts, allowAboveRoot) {\n\t\t\t\t\tvar up = 0, i, last;\n\t\t\t\t\tfor (i = parts.length - 1; i >= 0; i--) {\n\t\t\t\t\t\tlast = parts[i];\n\t\t\t\t\t\tif (last === '.') {\n\t\t\t\t\t\t\tparts.splice(i, 1);\n\t\t\t\t\t\t} else if (last === '..') {\n\t\t\t\t\t\t\tparts.splice(i, 1);\n\t\t\t\t\t\t\tup++;\n\t\t\t\t\t\t} else if (up) {\n\t\t\t\t\t\t\tparts.splice(i, 1);\n\t\t\t\t\t\t\tup--;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (allowAboveRoot) {\n\t\t\t\t\t\twhile (up) {\n\t\t\t\t\t\t\tparts.unshift('..');\n\t\t\t\t\t\t\tup--;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn parts;\n\t\t\t\t},\n\n\t\t\t\tnormalize = function (path) {\n\t\t\t\t\tvar\n\t\t\t\t\t\tisAbsolute = path.charAt(0) === '/',\n\t\t\t\t\t\ttrailingSlash = path.slice(-1) === '/';\n\t\t\t\t\tpath = normalizeArray(path.split('/').filter(function (p) {\n\t\t\t\t\t\treturn !!p;\n\t\t\t\t\t}), !isAbsolute).join('/');\n\t\t\t\t\tif (!path && !isAbsolute) {\n\t\t\t\t\t\tpath = '.';\n\t\t\t\t\t}\n\t\t\t\t\tif (path && trailingSlash) {\n\t\t\t\t\t\tpath += '/';\n\t\t\t\t\t}\n\t\t\t\t\treturn (isAbsolute ? '/' : '') + path;\n\t\t\t\t};\n\n\t\t\treturn {\n\t\t\t\tnormalize: normalize\n\t\t\t};\n\t\t}());\n\n\t\tfs = (function () {\n\t\t\tvar\n\t\t\t\treadFileSync = function (file, encoding) {\n\t\t\t\t\tvar AJAX;\n\t\t\t\t\tif (window.XMLHttpRequest) {\n\t\t\t\t\t\tAJAX = new XMLHttpRequest();\n\t\t\t\t\t\tif (AJAX.overrideMimeType) { AJAX.overrideMimeType('text/html'); }\n\t\t\t\t\t} else {\n\t\t\t\t\t\tAJAX = new ActiveXObject('Microsoft.XMLHTTP');\n\t\t\t\t\t}\n\t\t\t\t\tif (AJAX) {\n\t\t\t\t\t\tAJAX.open('GET', file, false);\n\t\t\t\t\t\tAJAX.send(null);\n\t\t\t\t\t\tif (AJAX.status !== 0 && (AJAX.status < 200 || AJAX.status > 399)) {\n\t\t\t\t\t\t\tthrow new Error ('Failed to load template ' + file);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn AJAX.responseText;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new Error ('Failed to load template ' + file);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\twatch = function () {};\n\n\t\t\treturn {\n\t\t\t\treadFileSync: readFileSync,\n\t\t\t\twatch: watch\n\t\t\t};\n\t\t}());\n\n\t}\n}());"}